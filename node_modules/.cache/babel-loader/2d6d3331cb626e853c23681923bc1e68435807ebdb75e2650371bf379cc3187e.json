{"ast":null,"code":"export default {\n  data() {\n    return {\n      // x = 0,\n      // y,\n      // width,\n      // height,\n    };\n  },\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius);\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      if (event.key == 'a') {\n        this.drawxx();\n      }\n    },\n    deleteDraw() {\n      this.ctx_line.clearRect(0, 0, 500, 500);\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius);\n    },\n    logx() {\n      console.log('きてるよー');\n    },\n    paste() {\n      null;\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    drawRectangle() {\n      let x1 = 100;\n      let y1 = 100;\n      // let x2=300;\n      // let y2=400;\n      let width = 800;\n      let height = 800;\n      let x_divide = 5;\n      let y_divide = 5;\n\n      // this.drawLine(x1, y1, x2, y2)\n      let x_plus = width / x_divide;\n      let y_plus = width / y_divide;\n      for (let i = 0; i <= x_divide; i++) {\n        this.drawVertical(x1, y1, width);\n        this.drawVertical(x1 + i * x_plus, y1, height);\n        this.drawHorizon(x1, y1 + i * y_plus, width);\n      }\n    },\n    drawLine(x1, y1, x2, y2) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x2, y2);\n      this.ctx.stroke();\n    },\n    drawVertical(x1, y1, height) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x1, y1 + height);\n      this.ctx.stroke();\n    },\n    drawHorizon(x1, y1, width) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x1 + width, y1);\n      this.ctx.stroke();\n    },\n    move(e) {\n      console.log(e.x);\n    }\n    // paste(pasteEvent) {\n    //   console.log(pasteEvent)\n    //   var item = pasteEvent.clipboardData.items[0];\n\n    //   if (item.type.indexOf(\"image\") === 0) {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function (event) {\n    //       document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    //   }\n    // },\n    // paste_img(pasteEvent) {\n    // //最初のアイテムを検討します(複数のアイテムに簡単に拡張できます)\n    // var item = pasteEvent.clipboardData.items[0];\n\n    // if (item.type.indexOf(\"image\") === 0)\n    // {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function(event) {\n    //         document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    // }\n  },\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el);\n    this.ctx = this.$refs._canvas_photo.getContext('2d');\n    this.ctx_line = this.$refs._canvas_line.getContext('2d');\n    // this.draw(this.radius)\n\n    // ドラッグの部分\n    document.addEventListener('mousedown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      document.removeEventListener('mousemove', this.move);\n    });\n    document.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('paste', pasteEvent => {\n      pasteEvent.preventDefault();\n      console.log('paste lister');\n      console.log(pasteEvent);\n      var item = pasteEvent.clipboardData.items[0];\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n        var reader = new FileReader();\n        reader.onload = function () {\n          console.log('patste-----');\n          // document.getElementById(\"pastearea\").src = event.target.result;\n\n          // $refs.pastearea.src = event.target.result\n        };\n\n        let img = new Image();\n        img.src = bloburl;\n        img.onload = () => {\n          console.log('onload');\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        };\n\n        reader.readAsDataURL(blob);\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AAyBA;EACAA;IACA;MACA;MACA;MACA;MACA;IAAA,CACA;EACA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAH;MACA;IACA;EACA;EACAI;IACAC;MACA;QACA;MACA;IAEA;IACAC;MACA;IACA;IACAC;MACA;MACA;IAEA;IACAC;MACAC;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;QAGA;QACA;QAGA;MACA;IAGA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACAP;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;EACA;;EAKAQ;IACA;IACA;IACAR;IACA;IACA;IACA;;IAGA;IACAS;MACAA;IACA;;IAEA;IACAA;MACAA;IACA;IAEAA;IACAC;MACAC;MACAX;MACAA;MACA;MAEA;QACA;QACA;QAEA;QACAY;UACAZ;UACA;;UAGA;QACA;;QACA;QACAa;QAEAA;UACAb;UAEA;UACA;UACA;UACA;UACA;UACA;QACA;;QAEAY;MACA;IACA;EAEA;AACA","names":["data","props","radius","type","default","watch","methods","onKeyDown","deleteDraw","draw","logx","console","paste","drawxx","drawRectangle","drawLine","drawVertical","drawHorizon","move","mounted","document","window","pasteEvent","reader","img"],"sourceRoot":"src","sources":["MyCanvas.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"canvas-wrap\">\n      <canvas ref=\"_canvas_photo\" width=\"1000\" height=\"1000\" class=\"canvas\"></canvas>\n      <canvas ref=\"_canvas_line\" width=\"1000\" height=\"1000\" class=\"canvas\" @keydown=\"onKeyDown\"></canvas>\n    </div>\n    <div class=\"tools\">\n      <!-- グリッド -->\n      <button  v-on:click=\"drawRectangle\">draw</button>\n      <!-- 削除ボタン -->\n      <button  v-on:click=\"deleteDraw\">delete</button>\n      <div ref=\"pastearea\" @paste=\"paste\" contenteditable=\"true\"\n        style=\"background:#fcc;\">\n\n        ここで右クリックを押して<br>\n        貼り付けて下さい\n\n      </div>\n      <div><img id=\"pastearea\" src=\"\"></div>\n      <input autofocus placeholder=\"文字を入力\" type=\"text\" @keydown=\"onKeyDown\">\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // x = 0,\n      // y,\n      // width,\n      // height,\n    }\n  },\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius)\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      if (event.key == 'a') {\n        this.drawxx()\n      }\n\n    },\n    deleteDraw(){\n      this.ctx_line.clearRect(0,0,500,500)\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius)\n\n    },\n    logx() {\n      console.log('きてるよー')\n    },\n    paste() {\n      null\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    drawRectangle() {\n\n      let x1 = 100;\n      let y1 = 100;\n      // let x2=300;\n      // let y2=400;\n      let width = 800\n      let height = 800\n      let x_divide = 5\n      let y_divide = 5\n\n      // this.drawLine(x1, y1, x2, y2)\n      let x_plus = width / x_divide\n      let y_plus = width / y_divide\n      for (let i = 0; i <= x_divide; i++) {\n\n\n        this.drawVertical(x1, y1, width)\n        this.drawVertical(x1 + i * x_plus, y1, height)\n\n\n        this.drawHorizon(x1, y1 + i * y_plus, width)\n      }\n\n\n    },\n    drawLine(x1, y1, x2, y2) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x2, y2);\n      this.ctx.stroke();\n    },\n    drawVertical(x1, y1, height) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x1, y1 + height);\n      this.ctx.stroke();\n    },\n    drawHorizon(x1, y1, width) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x1, y1);\n      this.ctx.lineTo(x1 + width, y1);\n      this.ctx.stroke();\n    },\n    move(e) {\n      console.log(e.x)\n    }\n    // paste(pasteEvent) {\n    //   console.log(pasteEvent)\n    //   var item = pasteEvent.clipboardData.items[0];\n\n    //   if (item.type.indexOf(\"image\") === 0) {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function (event) {\n    //       document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    //   }\n    // },\n    // paste_img(pasteEvent) {\n    // //最初のアイテムを検討します(複数のアイテムに簡単に拡張できます)\n    // var item = pasteEvent.clipboardData.items[0];\n\n    // if (item.type.indexOf(\"image\") === 0)\n    // {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function(event) {\n    //         document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    // }\n  },\n\n\n\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el)\n    this.ctx = this.$refs._canvas_photo.getContext('2d')\n    this.ctx_line = this.$refs._canvas_line.getContext('2d')\n    // this.draw(this.radius)\n\n\n    // ドラッグの部分\n    document.addEventListener('mousedown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      document.removeEventListener('mousemove', this.move);\n    });\n\n    document.addEventListener('keydown', this.onKeyDown)\n    window.addEventListener('paste', (pasteEvent) => {\n      pasteEvent.preventDefault();\n      console.log('paste lister')\n      console.log(pasteEvent)\n      var item = pasteEvent.clipboardData.items[0];\n\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n\n        var reader = new FileReader();\n        reader.onload = function () {\n          console.log('patste-----')\n          // document.getElementById(\"pastearea\").src = event.target.result;\n\n\n          // $refs.pastearea.src = event.target.result\n        };\n        let img = new Image()\n        img.src = bloburl;\n\n        img.onload = () => {\n          console.log('onload')\n\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        }\n\n        reader.readAsDataURL(blob);\n      }\n    })\n\n  }\n}\n</script>\n\n<style scoped>\n.canvas-wrap {\n  width: 600px;\n  max-width: 100%;\n  position: relative;\n  padding: 0;\n  box-sizing: content-box;\n}\n\n.canvas_warp:before {\n  content: \"\";\n  display: block;\n  padding-top: 50%;\n}\n\n.canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  border: 0;\n  max-width: 100%;\n  box-sizing: content-box;\n  padding: 0;\n  margin: 0;\n}\n\n.tools {\n  position: absolute;\n  top: 900px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}