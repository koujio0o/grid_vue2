{"ast":null,"code":"export default {\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius);\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      if (event.key == 'a') {\n        this.drawxx();\n      }\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius);\n    },\n    logx() {\n      console.log('きてるよー');\n    },\n    paste() {\n      null;\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    move(e) {\n      console.log(e.x);\n    }\n    // paste(pasteEvent) {\n    //   console.log(pasteEvent)\n    //   var item = pasteEvent.clipboardData.items[0];\n\n    //   if (item.type.indexOf(\"image\") === 0) {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function (event) {\n    //       document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    //   }\n    // },\n    // paste_img(pasteEvent) {\n    // //最初のアイテムを検討します(複数のアイテムに簡単に拡張できます)\n    // var item = pasteEvent.clipboardData.items[0];\n\n    // if (item.type.indexOf(\"image\") === 0)\n    // {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function(event) {\n    //         document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    // }\n  },\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el);\n    this.ctx = this.$refs._canvas_photo.getContext('2d');\n    this.ctx_line = this.$refs._canvas_line.getContext('2d');\n    // this.draw(this.radius)\n\n    // ドラッグの部分\n    document.addEventListener('mousedown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      document.removeEventListener('mousemove', this.move);\n    });\n    document.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('paste', pasteEvent => {\n      pasteEvent.preventDefault();\n      console.log('paste lister');\n      console.log(pasteEvent);\n      var item = pasteEvent.clipboardData.items[0];\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          console.log('patste-----');\n          document.getElementById(\"pastearea\").src = event.target.result;\n\n          // $refs.pastearea.src = event.target.result\n        };\n\n        let img = new Image();\n        img.src = bloburl;\n        img.onload = () => {\n          console.log('onload');\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        };\n\n        reader.readAsDataURL(blob);\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AAkBA;EACAA;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAH;MACA;IACA;EACA;EACAI;IACAC;MACA;QACA;MACA;IAEA;IACAC;MACA;MACA;IAEA;IACAC;MACAC;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACAH;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;EACA;;EAKAI;IACA;IACA;IACAJ;IACA;IACA;IACA;;IAGA;IACAK;MACAA;IACA;;IAEA;IACAA;MACAA;IACA;IAEAA;IACAC;MACAC;MACAP;MACAA;MACA;MAEA;QACA;QACA;QAEA;QACAQ;UACAR;UACAK;;UAGA;QACA;;QACA;QACAI;QAEAA;UACAT;UAEA;UACA;UACA;UACA;UACA;UACA;QACA;;QAEAQ;MACA;IACA;EAEA;AACA","names":["props","radius","type","default","watch","methods","onKeyDown","draw","logx","console","paste","drawxx","move","mounted","document","window","pasteEvent","reader","img"],"sourceRoot":"src","sources":["MyCanvas.vue"],"sourcesContent":["<template>\n  <div ref=\"xxx\">\n    <canvas ref=\"_canvas_photo\" width=\"1000\" height=\"1000\" class=\"canvas\"></canvas>\n    <canvas ref=\"_canvas_line\" width=\"1000\" height=\"10\" class=\"canvas\" @keydown=\"onKeyDown\"></canvas>\n    <button v-on:click=\"drawxx\">hello</button>\n    <div ref=\"pastearea\" @paste=\"paste\" contenteditable=\"true\"\n      style=\"width:200px; padding:20px 0px; text-align:center; background:#fcc;\">\n\n      ここで右クリックを押して<br>\n      貼り付けて下さい\n\n    </div>\n    <div><img id=\"pastearea\" src=\"\"></div>\n    <input autofocus placeholder=\"文字を入力\" type=\"text\" @keydown=\"onKeyDown\">\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius)\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      if (event.key == 'a') {\n        this.drawxx()\n      }\n\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius)\n\n    },\n    logx() {\n      console.log('きてるよー')\n    },\n    paste() {\n      null\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    move(e) {\n      console.log(e.x)\n    }\n    // paste(pasteEvent) {\n    //   console.log(pasteEvent)\n    //   var item = pasteEvent.clipboardData.items[0];\n\n    //   if (item.type.indexOf(\"image\") === 0) {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function (event) {\n    //       document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    //   }\n    // },\n    // paste_img(pasteEvent) {\n    // //最初のアイテムを検討します(複数のアイテムに簡単に拡張できます)\n    // var item = pasteEvent.clipboardData.items[0];\n\n    // if (item.type.indexOf(\"image\") === 0)\n    // {\n    //     var blob = item.getAsFile();\n\n    //     var reader = new FileReader();\n    //     reader.onload = function(event) {\n    //         document.getElementById(\"container\").src = event.target.result;\n    //     };\n\n    //     reader.readAsDataURL(blob);\n    // }\n  },\n\n\n\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el)\n    this.ctx = this.$refs._canvas_photo.getContext('2d')\n    this.ctx_line = this.$refs._canvas_line.getContext('2d')\n    // this.draw(this.radius)\n\n\n    // ドラッグの部分\n    document.addEventListener('mousedown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      document.removeEventListener('mousemove', this.move);\n    });\n\n    document.addEventListener('keydown', this.onKeyDown)\n    window.addEventListener('paste', (pasteEvent) => {\n      pasteEvent.preventDefault();\n      console.log('paste lister')\n      console.log(pasteEvent)\n      var item = pasteEvent.clipboardData.items[0];\n\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          console.log('patste-----')\n          document.getElementById(\"pastearea\").src = event.target.result;\n\n\n          // $refs.pastearea.src = event.target.result\n        };\n        let img = new Image()\n        img.src = bloburl;\n\n        img.onload = () => {\n          console.log('onload')\n\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        }\n\n        reader.readAsDataURL(blob);\n      }\n    })\n\n  }\n}\n</script>\n\n<style scoped>\n.canvas {\n  border: 1px solid #000;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}