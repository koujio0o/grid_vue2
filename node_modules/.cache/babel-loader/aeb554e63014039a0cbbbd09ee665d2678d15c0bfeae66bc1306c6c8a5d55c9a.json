{"ast":null,"code":"export default {\n  data() {\n    return {\n      grid_scale: 0,\n      canvas_x: 0,\n      canvas_y: 0,\n      canvas_width: 1000,\n      canvas_height: 1000,\n      mouseX: 0,\n      mouseY: 0,\n      grid_width: 100,\n      grid_height: 100\n    };\n  },\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius);\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      console.log('a down');\n      if (event.key == 'a') {\n        console.log('a down > a' + this.mouseX + ' ' + this.mouseY);\n        // window.onmousemove = ()\n        this.first_x = this.mouseX;\n        this.first_y = this.mouseY;\n        this.deleteDraw();\n        this.drawRectangle(this.mouseX, this.mouseY);\n      } else if (event.key == 'f') {\n        this.deleteDraw();\n        this.second_x = this.mouseX;\n        this.second_y = this.mouseY;\n        this.grid_width = -this.first_x + this.mouseX;\n        this.grid_height = -this.first_y + this.mouseY;\n        this.drawRectangle(this.first_x, this.first_y);\n      }\n    },\n    deleteDraw() {\n      console.log('delte > ' + this.canvas_width + ' :' + this.canvas_height);\n      this.ctx_line.clearRect(0, 0, this.canvas_width, this.canvas_height);\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius);\n    },\n    logx() {\n      console.log('きてるよー');\n    },\n    paste() {\n      null;\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    toSquare() {},\n    drawRectangle(x1 = 0, y1 = 100) {\n      // let x1 = 100;\n      // let y1 = 100;\n      // let x2=300;\n      // let y2=400;\n      let width = this.grid_width;\n      let height = this.grid_height;\n      let x_divide = 6;\n      let y_divide = 6;\n\n      // this.drawLine(x1, y1, x2, y2)\n      let x_plus = width / x_divide;\n      let y_plus = height / y_divide;\n      console.log('x_plus > ' + x_plus + ' ' + y_plus);\n      for (let i = 0; i <= x_divide; i++) {\n        // this.drawVertical(x1, y1, width)\n        this.drawVertical(x1 + i * x_plus, y1, height);\n        this.drawHorizon(x1, y1 + i * y_plus, width);\n      }\n    },\n    drawLine(x1, y1, x2, y2) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x2, y2);\n      this.ctx_line.stroke();\n    },\n    drawVertical(x1, y1, height) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x1, y1 + height);\n      this.ctx_line.stroke();\n    },\n    drawHorizon(x1, y1, width) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x1 + width, y1);\n      this.ctx_line.stroke();\n    },\n    move(e) {\n      // console.log('mouse.pos > ' + e.x + ' ' + e.y)\n      this.getMousePosition(e);\n    },\n    getMousePosition(evt) {\n      var rect = this.canvas.getBoundingClientRect();\n      // console.log('rect >' + rect.left + ' xxx ' + rect.top)\n\n      this.mouseX = evt.clientX - rect.left;\n      this.mouseY = evt.clientY - rect.top;\n\n      // this.mouseX = evt.clientX\n      // this.mouseY = evt.clientY\n\n      // console.log('mouse.pos 2> ' + this.mouseX + ' ' + this.mouseY)\n    }\n  },\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el);\n    this.canvas = this.$refs._canvas_line;\n    this.ctx = this.$refs._canvas_photo.getContext('2d');\n    this.ctx_line = this.$refs._canvas_line.getContext('2d');\n    // this.draw(this.radius)\n\n    // マウス移動イベント\n    document.addEventListener('mousemove', this.move);\n\n    // ドラッグの部分\n    document.addEventListener('mouseadown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      // document.removeEventListener('mousemove', this.move);\n    });\n    document.addEventListener('keydown', this.onKeyDown);\n\n    // pasteメソッド\n    window.addEventListener('paste', pasteEvent => {\n      pasteEvent.preventDefault();\n      console.log('paste lister');\n      console.log(pasteEvent);\n      var item = pasteEvent.clipboardData.items[0];\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n        var reader = new FileReader();\n        reader.onload = function () {\n          console.log('patste-----');\n          // document.getElementById(\"pastearea\").src = event.target.result;\n\n          // $refs.pastearea.src = event.target.result\n        };\n\n        let img = new Image();\n        img.src = bloburl;\n        img.onload = () => {\n          console.log('onload');\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          this.canvas_width = img.naturalWidth;\n          this.canvas_height = img.naturalHeight;\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        };\n\n        reader.readAsDataURL(blob);\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AA0BA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAH;MACA;IACA;EACA;EACAI;IACAC;MACAC;MACA;QACAA;QACA;QACA;QACA;QAEA;QAEA;MACA;QAEA;QACA;QACA;QAEA;QACA;QACA;MAEA;IAEA;IACAC;MACAD;MACA;IACA;IACAE;MACA;MACA;IAEA;IACAC;MACAH;IACA;IACAI;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC,YAEA;IACAC;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACAP;MACA;QAGA;QACA;QAGA;MACA;IAGA;IACAQ;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;;MAEA;MACA;;MAGA;MACA;;MAEA;IAEA;EACA;;EAKAC;IACA;IACA;IACAb;IACA;IACA;IACA;IACA;;IAEA;IACAc;;IAGA;IACAA;MACAA;IACA;;IAEA;IACAA;MACA;IAAA,CACA;IAEAA;;IAEA;IACAC;MACAC;MACAhB;MACAA;MACA;MAEA;QACA;QACA;QAEA;QACAiB;UACAjB;UACA;;UAGA;QACA;;QACA;QACAkB;QAEAA;UACAlB;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;;QAEAiB;MACA;IACA;EAEA;AACA","names":["data","grid_scale","canvas_x","canvas_y","canvas_width","canvas_height","mouseX","mouseY","grid_width","grid_height","props","radius","type","default","watch","methods","onKeyDown","console","deleteDraw","draw","logx","paste","drawxx","toSquare","drawRectangle","drawLine","drawVertical","drawHorizon","move","getMousePosition","mounted","document","window","pasteEvent","reader","img"],"sourceRoot":"src","sources":["MyCanvas.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"canvas-wrap\">\n      <canvas ref=\"_canvas_photo\" width=\"1000\" height=\"1000\" class=\"canvas\"></canvas>\n      <canvas ref=\"_canvas_line\" width=\"1000\" height=\"1000\" class=\"canvas\"></canvas>\n    </div>\n    <div class=\"tools\">\n      <!-- グリッド -->\n      <button v-on:click=\"drawRectangle\">draw</button>\n      <!-- 削除ボタン -->\n      <button v-on:click=\"deleteDraw\">delete</button>\n      <!-- 正方形 -->\n      <button v-on:click=\"toSquare\">正方形に</button>\n      <div ref=\"pastearea\" contenteditable=\"true\" style=\"background:#fcc;\">\n\n        ここで右クリックを押して<br>\n        貼り付けて下さい\n\n      </div>\n      <div><img id=\"pastearea\" src=\"\"></div>\n      <label><input type=\"range\" v-model=\"grid_scale\" min=\"0\" max=\"10\">グリッドでかさ{{   grid_scale   }}</label>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      grid_scale: 0,\n      canvas_x: 0,\n      canvas_y: 0,\n      canvas_width: 1000,\n      canvas_height: 1000,\n      mouseX: 0,\n      mouseY: 0,\n      grid_width: 100,\n      grid_height: 100,\n    }\n  },\n  props: {\n    radius: {\n      type: Number,\n      default: 50\n    }\n  },\n  watch: {\n    radius() {\n      this.draw(this.radius)\n    }\n  },\n  methods: {\n    onKeyDown(event) {\n      console.log('a down')\n      if (event.key == 'a') {\n        console.log('a down > a' + this.mouseX + ' ' + this.mouseY)\n        // window.onmousemove = ()\n        this.first_x = this.mouseX\n        this.first_y = this.mouseY\n\n        this.deleteDraw()\n\n        this.drawRectangle(this.mouseX, this.mouseY)\n      } else if (event.key == 'f') {\n       \n        this.deleteDraw()\n        this.second_x = this.mouseX\n        this.second_y = this.mouseY\n\n        this.grid_width =  - this.first_x + this.mouseX \n        this.grid_height =  - this.first_y + this.mouseY \n        this.drawRectangle(this.first_x, this.first_y)\n\n      }\n\n    },\n    deleteDraw() {\n      console.log('delte > ' + this.canvas_width + ' :' + this.canvas_height)\n      this.ctx_line.clearRect(0, 0, this.canvas_width, this.canvas_height)\n    },\n    draw(radius) {\n      // // this.paste_img()\n      this.logx(radius)\n\n    },\n    logx() {\n      console.log('きてるよー')\n    },\n    paste() {\n      null\n    },\n    drawxx() {\n      // 線を描画\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(200, 200);\n      this.ctx.stroke();\n    },\n    toSquare(){\n\n    },\n    drawRectangle(x1 = 0, y1 = 100) {\n\n      // let x1 = 100;\n      // let y1 = 100;\n      // let x2=300;\n      // let y2=400;\n      let width = this.grid_width\n      let height = this.grid_height\n      let x_divide = 6\n      let y_divide = 6\n\n      // this.drawLine(x1, y1, x2, y2)\n      let x_plus = width / x_divide\n      let y_plus = height / y_divide\n      console.log('x_plus > ' + x_plus + ' ' + y_plus)\n      for (let i = 0; i <= x_divide; i++) {\n\n\n        // this.drawVertical(x1, y1, width)\n        this.drawVertical(x1 + i * x_plus, y1, height)\n\n\n        this.drawHorizon(x1, y1 + i * y_plus, width)\n      }\n\n\n    },\n    drawLine(x1, y1, x2, y2) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x2, y2);\n      this.ctx_line.stroke();\n    },\n    drawVertical(x1, y1, height) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x1, y1 + height);\n      this.ctx_line.stroke();\n    },\n    drawHorizon(x1, y1, width) {\n      this.ctx_line.beginPath();\n      this.ctx_line.moveTo(x1, y1);\n      this.ctx_line.lineTo(x1 + width, y1);\n      this.ctx_line.stroke();\n    },\n    move(e) {\n      // console.log('mouse.pos > ' + e.x + ' ' + e.y)\n      this.getMousePosition(e)\n    },\n    getMousePosition(evt) {\n      var rect = this.canvas.getBoundingClientRect()\n      // console.log('rect >' + rect.left + ' xxx ' + rect.top)\n\n      this.mouseX = evt.clientX - rect.left\n      this.mouseY = evt.clientY - rect.top\n\n\n      // this.mouseX = evt.clientX\n      // this.mouseY = evt.clientY\n\n      // console.log('mouse.pos 2> ' + this.mouseX + ' ' + this.mouseY)\n\n    }\n  },\n\n\n\n\n  mounted() {\n    // mounted 以降で canvas の DOM にアクセスできる\n    // CreateJS などを使うときにも、ここで canvas と紐付ける\n    console.log(this.$el)\n    this.canvas = this.$refs._canvas_line\n    this.ctx = this.$refs._canvas_photo.getContext('2d')\n    this.ctx_line = this.$refs._canvas_line.getContext('2d')\n    // this.draw(this.radius)\n\n    // マウス移動イベント\n    document.addEventListener('mousemove', this.move);\n\n\n    // ドラッグの部分\n    document.addEventListener('mouseadown', () => {\n      document.addEventListener('mousemove', this.move);\n    });\n\n    // ドロップの部分\n    document.addEventListener('mouseup', () => {\n      // document.removeEventListener('mousemove', this.move);\n    });\n\n    document.addEventListener('keydown', this.onKeyDown)\n\n    // pasteメソッド\n    window.addEventListener('paste', (pasteEvent) => {\n      pasteEvent.preventDefault();\n      console.log('paste lister')\n      console.log(pasteEvent)\n      var item = pasteEvent.clipboardData.items[0];\n\n      if (item.type.indexOf(\"image\") === 0) {\n        var blob = item.getAsFile();\n        var bloburl = URL.createObjectURL(blob);\n\n        var reader = new FileReader();\n        reader.onload = function () {\n          console.log('patste-----')\n          // document.getElementById(\"pastearea\").src = event.target.result;\n\n\n          // $refs.pastearea.src = event.target.result\n        };\n        let img = new Image()\n        img.src = bloburl;\n\n        img.onload = () => {\n          console.log('onload')\n\n          var sw = img.naturalWidth;\n          var sh = img.naturalHeight;\n          this.canvas_width = img.naturalWidth\n          this.canvas_height = img.naturalHeight\n          // var dw = canvas.width;\n          // var dh = canvas.height;\n          this.ctx.drawImage(img, 0, 0, sw, sh);\n          // thiFFs.ctx.drawImage(img, 0, 0)\n        }\n\n        reader.readAsDataURL(blob);\n      }\n    })\n\n  }\n}\n</script>\n\n<style scoped>\n.canvas-wrap {\n  width: 1000px;\n  max-width: 100%;\n  position: relative;\n  padding: 0;\n  box-sizing: content-box;\n  border: solid\n}\n\n.canvas_warp:before {\n  content: \"\";\n  display: block;\n  padding-top: 50%;\n  border: solid\n}\n\n.canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  border: 0;\n  max-width: 100%;\n  box-sizing: content-box;\n  padding: 0;\n  margin: 0;\n  border: solid\n}\n\n.tools {\n  position: absolute;\n  top: 1200px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}